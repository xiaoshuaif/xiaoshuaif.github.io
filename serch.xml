<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[顺序表的合并]]></title>
    <url>%2F2018%2F10%2F25%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%2F%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%9A%84%E5%90%88%E5%B9%B6%2F%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%9A%84%E5%90%88%E5%B9%B6%2F</url>
    <content type="text"><![CDATA[依照书上函数和结构做的一个课程设计 主要实现了动态顺序表的建立，并使建立的两个非递减顺序表La,Lb合并为非递减顺序表Lc。 话不多说，放码过来 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142#include &lt;stdio.h&gt;#include &lt;malloc.h&gt;#include &lt;stdlib.h&gt;#define LIST_INIT_SIZE 100//线性表存储空间的初始分配量#define LISTINCREMENT 10//线性表存储空间的分配增量#define OVERFLOW -2#define ElemType int#define OK 1#define ERROR 0#define Status inttypedef struct&#123; ElemType *elem; //存储空间基址 int length;//当前长度 int listsize;//当前分配的存储容量（以sizeof(ElemType)为单位） &#125;sqlist; Status InitList_Sq(sqlist &amp;L) &#123; //构造一个空的线性表L。 L.elem=(ElemType *)malloc(LIST_INIT_SIZE*sizeof(ElemType)); if(!L.elem) &#123; exit(OVERFLOW); &#125; L.length=0; L.listsize=LIST_INIT_SIZE; return OK; &#125;//InitList_Sq; Status ListInsert_Sq(sqlist &amp;L,int i,ElemType e) &#123; //在顺序线性表L中第i个位置之前插入新的元素e， //i的合法值为1&lt;=i&lt;=ListLength_Sq(L)+1 Status *newbase,*q,*p; if (i&lt;1||i&gt;L.length+1) &#123; return ERROR;//i值不合法 &#125; if(L.length&gt;=L.listsize) &#123;//当前存储空间已满，增加分配 newbase=(ElemType *)realloc(L.elem,(L.listsize+LISTINCREMENT)*sizeof(ElemType)); if(!newbase) &#123; exit(OVERFLOW);//存储分配失败 &#125; L.elem=newbase;//新基址 L.listsize+=LISTINCREMENT;//增加存储容量 &#125; q=&amp;(L.elem[i-1]);//q为插入位置1 for(p=&amp;(L.elem[L.length-1]);p&gt;=q;--p) &#123; *(p+1)=*p;//插入位置及之后的元素右移 &#125; *q=e;//插入e ++L.length;//表长增1 return OK; &#125;//ListInsert_Sq void MergeList_Sq(sqlist La,sqlist Lb,sqlist &amp;Lc) &#123; //已知顺序表La和Lb的元素按值非递减排序 //归并La和Lb得到新的顺序表Lc，Lc的元素也按值非递减排列 Status *pa,*pb,*pc,*pa_last,*pb_last; pa=La.elem; pb=Lb.elem; Lc.listsize=Lc.length=La.length+Lb.length; Lc.elem=(ElemType *)malloc(Lc.listsize*sizeof(ElemType)); pc=Lc.elem; if(!Lc.elem) &#123; exit(OVERFLOW);//存储分配失败 &#125; pa_last=La.elem+La.length-1; pb_last=Lb.elem+Lb.length-1; while(pa&lt;=pa_last&amp;&amp;pb&lt;=pb_last)//归并 &#123; if(*pa&lt;=*pb) &#123; *pc++=*pa++; &#125; else &#123; *pc++=*pb++; &#125; &#125; while(pa&lt;=pa_last) &#123; *pc++=*pa++; &#125; while(pb&lt;=pb_last) &#123; *pc++=*pb++; &#125; &#125;//MergeList_Sq Status creat(sqlist &amp;L)&#123;//向顺序表中输入元素 int i=1,j; do &#123; scanf("%d",&amp;j); ListInsert_Sq(L,i,j); i++; &#125;while(getchar()!='\n'); return OK;&#125;Status getelem(sqlist &amp;L,int i)&#123;//输出表中第i个元素 ElemType *q; int e; if(i&lt;1||i&gt;L.length+1) &#123; return printf("i为非法值\n"); &#125; q=&amp;(L.elem[i-1]); e=*q; return(e);&#125;int main() &#123; int i=1,j; sqlist La,Lb,Lc; InitList_Sq(La); InitList_Sq(Lb); printf("输入递增La表中的元素:"); creat(La); printf("输入递增Lb表中的元素:"); creat(Lb); MergeList_Sq(La,Lb,Lc); printf("合并后Lc表中的元素为:"); for(i=1;i&lt;=Lc.length;i++) &#123; printf("%d ",getelem(Lc,i)); &#125; system("color 0A"); system("pause"); return 0; &#125; 结果如图]]></content>
      <categories>
        <category>数据结构(C语言)</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[虚拟机使用教程]]></title>
    <url>%2F2018%2F10%2F14%2FLinux%2F%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>虚拟机</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux学习笔记]]></title>
    <url>%2F2018%2F10%2F14%2FLinux%2Flinux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo创建文章]]></title>
    <url>%2F2018%2F10%2F14%2Fhexo%2Fhexo%E5%88%9B%E5%BB%BA%E6%96%87%E7%AB%A0%2F</url>
    <content type="text"><![CDATA[​ 经过上篇的步骤后，基本的博客系统就已经搭建好了，然后就是博客的界面设置和文章的创建了。 配置next主题当然，最权威的是看官方说明文档 ，我在这里提供一个示例，供大家参考。 next中文件及目录解析 12345678910111213141516171819202122232425262728293031323334353637├──.github #git信息├── languages #多语言 ├── default.yml #默认语言 ├── zh-Hans.yml #简体中文 ├── zh-tw.yml #繁体中文├── layout #布局，根目录下的*.ejs文件是对主页，分页，存档等的控制 ├── _custom #可以自己修改的模板，覆盖原有模板 ├── _header.swig #头部样式 ├── _sidebar.swig #侧边栏样式 ├── _macro #可以自己修改的模板，覆盖原有模板 ├── post.swig #文章模板 ├── reward.swig #打赏模板 ├── sidebar.swig #侧边栏模板 ├── _partials #局部的布局 ├── head #头部模板 ├── search #搜索模板 ├── share #分享模板 ├── _script #局部的布局 ├── _third-party #第三方模板 ├── _layout.swig #主页面模板 ├── index.swig #主页面模板 ├── page.swig #页面模板 ├── tag.swig #tag模板├── scripts #script源码 ├── tags #tags的script源码 ├── marge.js #页面模板├── source #源码 ├── css #css源码 ├── _common #*.styl基础css ├── _custom #*.styl局部css ├── _mixins #mixins的css ├── fonts #字体 ├── images #图片 ├── lib #添加的文件 ├── js #javascript源代码├── _config.yml #主题配置文件├── README.md #用GitHub的都知道 next配置在这里我称为 ”主题配置文件“ ，位于hexo/themes/next目录下，文件名为_config.yml。 改之前先备份一份“_config.yml”，以防改错。 以我的博客 为例，阐述一下需要配置的地方： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677# Set default keywords (Use a comma to separate)#设置关键字keywords: &quot;Hexo, NexT&quot;footer: # Specify the date when the site was setup. # If not defined, current year will be used. #设置博客时间 since: 2018 # When running the site in a subdirectory (e.g. domain.tld/blog), remove the leading slash from link value (/archives -&gt; archives).# 设置菜单，就是我的博客左侧那一列# Usage: `Key: /link/ || icon`# Key is the name of menu item. If translate for this menu will find in languages - this translate will be loaded; if not - Key name will be used. Key is case-senstive.# Value before `||` delimeter is the target link.# Value after `||` delimeter is the name of FontAwesome icon. If icon (with or without delimeter) is not specified, question icon will be loaded.menu: home: / || home #在菜单上显示首页 about: /about/ || user #在菜单上显示关于 tags: /tags/ || tags #在菜单上显示标签 categories: /categories/ || th #在菜单上显示分类 archives: /archives/ || archive #在菜单上显示归档 #schedule: /schedule/ || calendar #调度程序，日程安排程序 #sitemap: /sitemap.xml || sitemap #commonweal: /404/ || heartbeat # Schemes#设置风格#scheme: Muse#scheme: Mistscheme: Pisces #双栏风格#scheme: Gemini# Automatically Excerpt. Not recommend.# Please use &lt;!-- more --&gt; in the post to control excerpt accurately.auto_excerpt: enable: ture #设置是否显示阅读全文，文章较多的话，有必要设置为 true length: 150 # 一些第三方服务设置，这里只提一下”多说“，其他的请参考官方介绍# Make duoshuo show UA# user_id must NOT be null when admin_enable is true!# you can visit http://dev.duoshuo.com get duoshuo user id.duoshuo_info: ua_enable: true admin_enable: true user_id: 0 # 这里不要动，千万别动 admin_nickname: DIY# Code Highlight theme# Available value:# normal | night | night eighties | night blue | night bright# https://github.com/chriskempson/tomorrow-theme#highlight_theme: normal# 代码高亮主题highlight_theme: night eighties #代码框的颜色，颜色可参考官方文档进行修改# 友情链接links_title: Links#links: #Title: http://example.com/ #可取消注释，自己进行修改# 订阅微信公众号# Wechat Subscriber#wechat_subscriber: #enabled: true #qcode: /path/to/your/wechatqcode ex. /uploads/wechat-qcode.jpg #description: ex. subscribe to my blog by scanning my public wechat account # 打赏配置# 打赏说明文本reward_comment: 坚持原创技术分享，您的支持将鼓励我继续创作！# 微信收款二维码wechatpay: /images/weixin.jpg #在next/source/images中放入图片#支付宝收款二维码alipay: /images/zhifubao.jpg#bitcoin: /images/bitcoin.png 创建分类界面效果： 1.打开命令行，定位到hexo目录下 2.输入新建一个页面，命名为 categories 1$ hexo new page categories 根据提示找到index.md文件，进入修改 1234title: 分类date: 2018-10-13 11:43:29type: &quot;categories&quot; # 将页面的类型设置为categories,主题将自动为这个页面显示所有分类comments: false # 如果有启用多说 或者 Disqus 评论，默认页面也会带有评论。需要关闭的话，设置为false 创建标签页面效果： 1.打开命令行，定位到hexo目录下 2.新建一个页面，命名为tags 1$ hexo new page &quot;tags&quot; 根据提示进入index.md文件，修改为 1234title: tagsdate: 2018-10-13 11:51:24type: &quot;tags&quot; # 将页面的类型设置为 tags,主题将自动为这个页面显示标签云comments: false 创建关于页面效果： 1.打开命令行，定位到hexo目录下 2.新建一个页面，命名为about 1$ hexo new page &quot;about&quot; 进入about的index.md文件 123title: aboutdate: 2018-10-13 16:02:09type: &quot;about&quot; 站点目录解析12345678├── .deploy_git #执行hexo deploy命令部署到Github上的内容目录├── public #执行hexo generate命令，输出的静态网页内容目录├── scaffolds #layout模板文件目录，其中的md文件可以添加编辑├── source #文章源码目录，该目录下的markdown和html文件均会被hexo处理。该页面对应repo的根目录，404文件、favicon.ico文件，CNAME文件等都应该放这里，该目录下可新建页面目录。 ├── _posts #发布文章├── themes #主题文件目录├── _config.yml #全局配置文件，大多数的设置都在这里├── package.json#应用程序数据，指明hexo的版本等信息，类似于一般软件中的关于按钮 站点配置文件打开hexo中的 _config.yml文件，先备份 这是我的一个配置，除了前面讲到的，基本不需要修改，可以看看侧边栏头像模块。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129# Hexo Configuration## Docs: https://hexo.io/docs/configuration.html## Source: https://github.com/hexojs/hexo/# Sitetitle: 小帅的博客subtitle: 从不依靠 从不寻找 非常沉默 非常骄傲description: IT学习笔记keywords:author: 小帅language: zh-Hanstimezone:# 侧边栏头像设置avatar: /uploads/portrait.jpg# Local Searchsearch: path: serch.xml field: post format: html limit: 10000# URL## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;url: http://yoursite.comroot: /permalink: :year/:month/:day/:title/permalink_defaults:# Directorysource_dir: sourcepublic_dir: publictag_dir: tagsarchive_dir: archivescategory_dir: categoriescode_dir: downloads/codei18n_dir: :langskip_render:# Writingnew_post_name: :title.md # File name of new postsdefault_layout: posttitlecase: false # Transform title into titlecaseexternal_link: true # Open external links in new tabfilename_case: 0render_drafts: falsepost_asset_folder: turerelative_link: falsefuture: truehighlight: enable: true line_number: true auto_detect: false tab_replace:# Home page setting# path: Root path for your blogs index page. (default = &apos;&apos;)# per_page: Posts displayed per page. (0 = disable pagination)# order_by: Posts order. (Order by date descending by default)index_generator: path: &apos;&apos; per_page: 10 order_by: -date# Category &amp; Tagdefault_category: uncategorizedcategory_map:tag_map:# Date / Time format## Hexo uses Moment.js to parse and display date## You can customize the date format as defined in## http://momentjs.com/docs/#/displaying/format/date_format: YYYY-MM-DDtime_format: HH:mm:ss# Pagination## Set per_page to 0 to disable paginationper_page: 10pagination_dir: page# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/#Rss订阅plugin:- hexo-generator-feed #Feed Atom feed: type: atom path: atom.xml limit: 20theme: next# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: https://github.com/xiaoshuaif/xiaoshuaif.github.io.git branch: master message: 预览，进入命令行hexo目录下输入 hexo s 用markdown编辑文章下载一个markdown编辑器，我用的是Typora 新建文章 1$ hexo new [layout] &lt;title&gt; 可以在命令中指定文章的布局（layout），默认为 post，可以通过修改 _config.yml 中的 default_layout 参数来指定默认布局。 新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。 生成的文件在hexo/source/_posts文件夹下 进入后格式： 1234title: #标题date: 2018-10-14 20:54:04 #创建时间tags: hexo #分类categories: hexo #标签 ​ 在下文编辑文章 ​ …… 注意：分类和标签是自动维护的，关键是的文章要按照规定的格式写，如上格式，可以参考。 最后本地预览，成功后上传GitHub。]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo搭建流程]]></title>
    <url>%2F2018%2F10%2F13%2Fhexo%2Fhexo%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[​ 博客，是站在巨人肩膀上搭建的，感谢开源，让我尽情享受拿来主义，但毕竟不是做前端的，有一些坑掉进去爬出来还是费了一些力气的，所以做个记录，利人利己。 ​ 本篇所包含的内容如下： ​ 1.安装Git Bash ​ 2.安装NodeJs ​ 3.安装hexo ​ 4.本地预览 ​ 5.修改主题 ​ 6.创建Github Pages ​ 7.绑定个人域名 环境配置安装Git BashGit是一个开源的分布式版本控制系统，在这里的作用就是用(linux)命令执Windows操作。 下载地址：https://git-scm.com/downloads 安装步骤：双击下载好的exe文件，一路next。（可自选安装目录） 安装好后，右键如图所示： 则安装成功，右键Git Bash Here，查看版本命令：git version 安装NodeJsHexo 是使用 NodeJs 开发的，所以一定要安装 NodeJs，里面的npm工具很有用 下载地址：https://nodejs.org/en/ ||（说明：LTS为长期支持版，Current为当前最新版） 安装步骤：下载好后，双击安装，一路next，注意在custom setup这一步要选Add to PATH，这样就不用去配置电脑环境变量了。win+R输入cmd回车，输入path查看nodejs是否配置在里面（环境变量）。 查看版本：node -v 安装hexo接下来就是在gitbash中用npm工具搭建hexo了 首先在D盘创建文件夹命名为/hexo（用来存放所有博客的文件），cd到该文件夹下 123456#安装hexo：$ npm i -g hexo#查看版本：$ hexo -v#初始化：$ hexo init 默认目录结构： deploy：执行hexo deploy命令部署到GitHub上的内容目录 public：执行hexo generate命令，输出的静态网页内容目录 scaffolds：layout模板文件目录，其中的md文件可以添加编辑 scripts：扩展脚本目录，这里可以自定义一些javascript脚本 source：文章源码目录 drafts：草稿文章 posts：发布文章 themes：主题文件目录 _config.yml：全局配置文件，大多数的设置都在这里 package.json：应用程序数据，指明hexo的版本等信息，类似于一般软件中的关于按钮 本地预览123$ hexo -g #hexo generate生成静态文件$ hexo s #hexo server 运行本地服务#hexo 3.0把服务器独立成个别模块，需要单独安装：npm i hexo-server hexo s启动服务器。默认情况下，访问网址为：http://localhost:4000/ 如果localhost:4000无响应，一般情况下是因为4000端口被占用，使用下面命令更改端口号为5000，然后浏览器输入http://localhost:5000/ 1$ hexo s -g 5000 到这里博客就算是已经搭建成功了，接下来就是更改配置 修改及配置主题修改站点配置文件（_config.yml）详情见hexo官方文档：https://hexo.io/zh-cn/docs/themes#config-yml 这里先看看最基础的配置，也就是必须要改动的： 123456789#:后一定要有一个空格，否则轻则没有作用，重则报错，无法启动。title: xxx #博客名，也称站点名称subtitle： #副标题author: xxx #作者名字description: xxx # 对站点的描述，搜索引擎会抓取，可以自定义（这个还是加上比较好）language: zh-Hans #语言 简体中文，语言文件在themes主题文件language中timezone: #网站时区，hexo默认使用你电脑的时区theme： next #配置主题，next是我后来配置的，hexo初始为landscape，没有配置其它主题的不要修改 timezone:时区列表 更改主题你可以去 主题 里面找到你想要的主题。在GitHub中搜索你要的主题名称，里面会有该主题的如何使用介绍。 接下来使用next主题来介绍： 安装Next主题 1git clone https://github.com/iissnan/hexo-theme-next themes/next 使用Next主题 首先，复制一份打开本地博客目录下的 _config.yml 文件，命名为 _config备份.yml，做为备份，以防改错然后，使用文本编辑器打开本地博客目录下的 _config.yml 文件，搜索，定位 theme 键值，将 theme 的值修改为 next 1theme: next #刚才安装的主题名称 域名访问创建Github Pages注册/登录 如果没有账号，前往 GitHub 页面完成注册。有的话直接登录 创建pages：依次点击 1、 2、 Repository name中必须填入：你的用户名.github.io 选中Initialize this repository with a README,其它地方不用修改。最后按Creat respository完成创建。 hexo关联GitHub 修改_config.xml: 1234deplay: type: git repo: https://github.com/你的用户名/你的用户名.github.io.git branch: master 回到github中，配置github账户信息（YourName和YourEmail都替换成你自己的）： 12345678$ git config --global user.name &quot;YourName&quot;$ git config --global user.email &quot;YourEmail&quot;#创建的文件会在用户文件夹下.gitconfig#创建SSH 专为远程登录会话和其他网络服务提供安全性的协议，说白了就是防止信息泄露$ ssh-keygen -t rsa -C &quot;yourmail&quot;$ cd ~/.ssh$ cat id_rsa.pub#将上面获取的ssh放到GitHub中，也可以打开C:\Users\FS226\.ssh\id_rsa.pub中复制 打开GitHub，点击头像下方Setting-&gt;SSH and GPG keys 添加一个 New SSH key ，title随便取，key就填刚刚那一段。 在gitbash中验证是否添加成功：ssh -T git@github.com 最后回到github中，进入hexo目录中，执行以下命令： 123456$ hexo-deployer-git #安装自动部署发布工具$ hexo clean #清除缓存文件 (db.json) 和已生成的静态文件 (public)。#在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。$ hexo generate #生成静态文件$ hexo deploy #部署网站#注意 第一次deploy的过程中要输入你的username及password 成功后浏览器输入http://yourgithubname.github.io 就可以看到你的个人博客了 以后要发布新文章，执行上三步命令即可。 绑定个人域名 不想绑定的自行忽略 第一步购买域名，随便在哪个网站买一个我是在阿里云购买的 第二部添加域名解析，参考阿里云域名解析上面的新人手册。 命令行ping yourgithubname.github.io ，查看自己网站的IP，添加解析www @ m 接着再次部署一下 进入GitHub中进入你的库 在此处添加你的域名，如我的为 fshuai.top 然后你会发现在code中多了一个CNAME文件。 到这，整个hexo就部署完成了，你可以通过你的域名进行访问你的博客。 || 为了能简化步骤，可以在你的sorce目录中添加一个CNAME文件，无后缀，填入你的域名。 123$ hexo clean$ hexo g$ hexo d 下一篇介绍next的配置和hexo创建文章以及使用typora进行写作。 限于水平，疏漏和错误难免，敬请读者批评指正。如有任何意见，请发送至邮箱。]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
